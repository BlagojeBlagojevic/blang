0 
0
word memset 
	? memsetSize
	drop
	? memsetSrc
	drop
	? memsetDest
	drop
	SP ? memsetSP
	drop
	while
		
		memsetSrc memsetDest ??		
		memsetDest 1 + ? memsetDest
		memsetSize 0 = if
			breakloop
		end
		memsetSize -1 + ? memsetSize
	endloop
	memsetSP SET
endword

word DEBUG 
	printstack halt
endword


word MAX_COURUTINE       1024 endword
word NONINITED_COURUTINE -1 endword
word INACTIVE_COURUTINE   1 endword



word INIT_COURUTINE
	arr _courutines MAX_COURUTINE drop
	0 ? _courutinesCounter drop
	(& _courutines0 -1 MAX_COURUTINE) memset	
endword

word COURUTINE 7 IP +  & _courutines0 _courutinesCounter   + ??   while endword

word ENDCOURUTINE endloop endword 



word BREAKCOURUTINE breakloop endword

word MAIN_COURUTINE
	COURUTINE
		0 ? _courutinesCounter drop 
		& _courutines0 @ dup
		0 = if
			while 
				_courutinesCounter 1 + ? _courutinesCounter
				& _courutines0 + @ dup dup dup
				-1 = if
					0 10  "NothingInCourutines" 10 printstring
					0 exit
				end
				0 = ! if breakloop end
			endloop
		end
		JMP
	YIELD_COURUTINE	
	ENDCOURUTINE 
endword

word YIELD_COURUTINE
	 & _courutines0 _courutinesCounter 1 + + @ dup dup  
	 _courutinesCounter 1 + ? _courutinesCounter drop 
	1 >  if
		0 = if  
			while
				_courutinesCounter 1 + ? _courutinesCounter drop
				& _courutines0 _courutinesCounter  + @ dup dup
				-1 = if
					0 ? _courutinesCounter drop
				end
				1 < if dup  JMP end
			endloop
		end
	 	BREAKCOURUTINE
	 end
	 JMP
endword

word FREE_COURUTINE
	0 & _courutines0 _courutinesCounter + ?? drop 
endword



0 ? i1 drop
word counter1
	COURUTINE
		i1 print  drop
		0 32 32 "Corutine1"  printstring halt 0 SET
		i1 1 + ? i1 10 = if FREE_COURUTINE end
 		YIELD_COURUTINE
	ENDCOURUTINE
endword

0 ? i2 drop
word counter2
	COURUTINE
		i2 print drop
		0 32 32 "Corutine2" printstring halt 0 SET
		i2 1 + ? i2 15 = if FREE_COURUTINE end
		YIELD_COURUTINE
	ENDCOURUTINE
endword

0 ? i3 drop
word counter3
	COURUTINE
		i3 print drop
		0 32 32 "Corutine3" printstring halt 0 SET
		i3 1 + ? i3 7 = if FREE_COURUTINE end
		YIELD_COURUTINE
	ENDCOURUTINE
endword


word SDL_ERROR
    0 swap < if
    0 "SdlError" 10 exit
    end
endword
word SDL_QUIT    256 endword
word SDL_KEYDOWN 768 endword


50 ? MAX_X_POS 
50 ? MAX_Y_POS 
word width 20  endword
word height 16 endword
word sdlQuitEvent 256 endword

word BACKGROUND 32 endword  
word CELL_CHAR 35 endword   
word SLEEP_TIME 0 endword

arr checkCoords 100

arr mainMatrix 3000



arr neighborCountBuffer 3000



word increment 1 + endword

word matrixIndex  MAX_X_POS updateCell_y * updateCell_x +   endword
word matrixIndexP MAX_X_POS printCells_y * printCells_x +   endword
word matrixIndexC MAX_X_POS tempY        *        tempX +   endword
1234 ? seed

word rand	
	164603309 seed * 14738995463 or ? seed 
endword


word matrixInit

	0 ? printCells_x
	0 ? printCells_y
	SP ? printCells_SP
	
	while MAX_Y_POS printCells_y loopBreak
		printCells_y 1 + ? printCells_y
		
		0 ? printCells_x
		
		while printCells_x MAX_X_POS  loopBreak
			printCells_x 1 + ? printCells_x drop
			2 rand / 1000000 >  dup if
				BACKGROUND
				& mainMatrix0 matrixIndexP + ??
			end 
			else
				CELL_CHAR
				& mainMatrix0 matrixIndexP + ??
			end 
		endloop
		
	endloop
	0 SET

endword


word loopBreak 
			= if
				breakloop
			end  
endword


word updateCell 
COURUTINE
	0 ? updateCell_x
	MAX_Y_POS ? updateCell_y
	SP ? upadteCell_SP
	
	while 0 updateCell_y loopBreak
		updateCell_y -1 + ? updateCell_y
		
		0 ? updateCell_x
		
		while updateCell_x MAX_X_POS  loopBreak
			updateCell_x 1 + ? updateCell_x
				
			3 & neighborCountBuffer0 matrixIndex + @   
			= if
						CELL_CHAR
						& mainMatrix0 matrixIndex + ??			
			end
			3 & neighborCountBuffer0 matrixIndex + @ >  
			2 & neighborCountBuffer0 matrixIndex + @ <
			or
			1 = if
				BACKGROUND
				& mainMatrix0 matrixIndex + ??
							
			end
		endloop
			
	endloop
	 
	upadteCell_SP SET
	YIELD_COURUTINE
ENDCOURUTINE
endword


word countNeighbors
	
	? posY
	drop
	 
	? posX
	drop
	
	SP ? countNeighbors_SP
	
	
	1 posY  + ? checkCoords0
   -1 posX  + ? checkCoords1
	
	1 posY  + ? checkCoords2
	0 posX  + ? checkCoords3
	
	1 posY  + ? checkCoords4
	1 posX  + ? checkCoords5

	0 posY  + ? checkCoords6
	1 posX  + ? checkCoords7

   -1 posY  + ? checkCoords8
	1 posX  + ? checkCoords9
	
   -1 posY  + ? checkCoords10
 	0 posX  + ? checkCoords11
	
   -1 posY  + ? checkCoords12
   -1 posX  + ? checkCoords13
	
	0 posY  + ? checkCoords14
   -1 posX  + ? checkCoords15
	
	0 ? i
	0 ? neighbors
	
	
	while
		& checkCoords0 i + @ ? tempY	
		& checkCoords1 i + @ ? tempX
		
		0 tempX < if
			MAX_X_POS -1 + ? tempX 
		end
		
		MAX_X_POS -1 + tempX > if
			0 ? tempX 
		end
		
		0 tempY < if
			MAX_Y_POS -1 + ? tempY 
		end
		
		MAX_Y_POS -1 + tempY > if
			0 ? tempY 
		end
		
				
		& mainMatrix0 matrixIndexC + @ CELL_CHAR = if
			neighbors 1 + ? neighbors	
		end
		
					
		i 2 + ? i 
		i 16 = if 
			neighbors 
			breakloop
		end
	endloop

	countNeighbors_SP SET
	neighbors
	 
	
endword


word printCells 
COURUTINE	
	0 ? printCells_x
	MAX_Y_POS ? printCells_y
	SP ? printCells_SP
	
	while printCells_y 0  loopBreak
		printCells_y -1 + ? printCells_y
		
		-1 ? printCells_x
		
		while printCells_x MAX_X_POS  loopBreak
			printCells_x 1 + ? printCells_x
			& mainMatrix0 matrixIndexP + @ 
			dup CELL_CHAR = if (0, 255, 0, 0)drawColor 
			(printCells_x width *  printCells_y height * width height)renderRect end
			 0
			printCells_x printCells_y	countNeighbors
			& neighborCountBuffer0 matrixIndexP + ?? 		
		endloop
		
	endloop
	 
	 printCells_SP SET
	 YIELD_COURUTINE
ENDCOURUTINE
endword

0 ? isRandomaised
word convayLoop

	SP print		
		printCells
		updateCell
		COURUTINE			
			SLEEP_TIME sleep
			0 ? counter drop
			pushEvent 
			dup SDL_QUIT = if
       		 	0 10 "Quiting" printstring 10 exit
    		end
			dup SDL_KEYDOWN = if 1 ? isRandomaised 0 "Randomised" 10 printstring 0 0  end
    		drop
			drop
			(18 18 18 18)drawColor
			renderPresent
        	renderClear SDL_ERROR
			0 SET
				
			YIELD_COURUTINE
		ENDCOURUTINE
		COURUTINE isRandomaised 1 = if 0 ? isRandomaised drop matrixInit end YIELD_COURUTINE  ENDCOURUTINE 
		MAIN_COURUTINE
	
endword


word main
600 1000 initSdl
0 SET 


0
1 ? seed
matrixInit



CELL_CHAR ? mainMatrix925  
CELL_CHAR ? mainMatrix926  
CELL_CHAR ? mainMatrix927



CELL_CHAR ? mainMatrix120  
CELL_CHAR ? mainMatrix170  
CELL_CHAR ? mainMatrix220


CELL_CHAR ? mainMatrix1025  
CELL_CHAR ? mainMatrix1026  
CELL_CHAR ? mainMatrix1075
CELL_CHAR ? mainMatrix1076


0 10 10 9 9 "GameOfLife" 10 9 9 9 9 "By:" 32 "B.B." 10 10 printstring
0 "________________________________________________________" 10 10 10 printstring

convayLoop
endword


INIT_COURUTINE
main

endscript . 



